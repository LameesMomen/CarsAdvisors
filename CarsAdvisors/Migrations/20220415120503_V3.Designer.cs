// <auto-generated />
using System;
using CarsAdvisors.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarsAdvisors.Migrations
{
    [DbContext(typeof(Cars))]
    [Migration("20220415120503_V3")]
    partial class V3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarsAdvisors.Models.Compare", b =>
                {
                    b.Property<int>("CompareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Model_ID")
                        .HasColumnType("int");

                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompareID");

                    b.HasIndex("Model_ID");

                    b.ToTable("Compares");
                });

            modelBuilder.Entity("CarsAdvisors.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Model_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Model_ID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CarsAdvisors.Models.Maker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MakerImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MakerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Makers");
                });

            modelBuilder.Entity("CarsAdvisors.Models.Model", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AUX")
                        .HasColumnType("bit");

                    b.Property<float>("Acceleration")
                        .HasColumnType("real");

                    b.Property<bool>("Active_Park_Assist")
                        .HasColumnType("bit");

                    b.Property<string>("Air_Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Airbags")
                        .HasColumnType("int");

                    b.Property<int>("Airbags_count")
                        .HasColumnType("int");

                    b.Property<bool>("Alarm_Anti_Theft_System")
                        .HasColumnType("bit");

                    b.Property<bool>("Ambient_Lighting")
                        .HasColumnType("bit");

                    b.Property<bool>("Anti_Lock_Braking_System")
                        .HasColumnType("bit");

                    b.Property<bool>("Auto_Folding_Mirrors")
                        .HasColumnType("bit");

                    b.Property<bool>("Auto_dimming_mirror")
                        .HasColumnType("bit");

                    b.Property<bool>("Auto_lighting")
                        .HasColumnType("bit");

                    b.Property<bool>("Automatic_Start_Stop_Function")
                        .HasColumnType("bit");

                    b.Property<bool>("Back_Holder")
                        .HasColumnType("bit");

                    b.Property<bool>("Bluetooth")
                        .HasColumnType("bit");

                    b.Property<string>("Body_Style")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Center_Lock")
                        .HasColumnType("bit");

                    b.Property<bool>("Cruise_Control")
                        .HasColumnType("bit");

                    b.Property<int>("Cylinders")
                        .HasColumnType("int");

                    b.Property<string>("Dashboard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Drive_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Driver_Seat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Electric_Handbrake")
                        .HasColumnType("bit");

                    b.Property<bool>("Electronic_Brake_Force_Distribution")
                        .HasColumnType("bit");

                    b.Property<bool>("Electronic_Window")
                        .HasColumnType("bit");

                    b.Property<string>("Engine_Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Foglamps")
                        .HasColumnType("bit");

                    b.Property<bool>("Front_Camera")
                        .HasColumnType("bit");

                    b.Property<string>("Fuel_Consumption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fuel_Tank_Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Fuel_Type")
                        .HasColumnType("int");

                    b.Property<string>("Fuelconsumption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gear_Shifts")
                        .HasColumnType("int");

                    b.Property<bool>("Head_Up_Display")
                        .HasColumnType("bit");

                    b.Property<string>("Headlamps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("Hill_Assist")
                        .HasColumnType("bit");

                    b.Property<string>("Horse_power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Keyless_Entry")
                        .HasColumnType("bit");

                    b.Property<bool>("Keyless_Start")
                        .HasColumnType("bit");

                    b.Property<bool>("LED_Daytime_running_lamps")
                        .HasColumnType("bit");

                    b.Property<bool>("Leather_Seats")
                        .HasColumnType("bit");

                    b.Property<bool>("Leather_Steering_Wheel")
                        .HasColumnType("bit");

                    b.Property<bool>("Leather_Transmission")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<bool>("Light_Sensors")
                        .HasColumnType("bit");

                    b.Property<int>("Luggage_Box_Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Luggageboxcapacity")
                        .HasColumnType("int");

                    b.Property<int>("Maker_ID")
                        .HasColumnType("int");

                    b.Property<int>("Maximum_Speed")
                        .HasColumnType("int");

                    b.Property<string>("Maximum_power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maximum_torque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Multi_function_steering_wheel")
                        .HasColumnType("bit");

                    b.Property<bool>("Multifunction_Steering_Wheel")
                        .HasColumnType("bit");

                    b.Property<bool>("Navigation_System")
                        .HasColumnType("bit");

                    b.Property<int>("Number_of_Seats")
                        .HasColumnType("int");

                    b.Property<bool>("Paddle_shifters")
                        .HasColumnType("bit");

                    b.Property<bool>("Panorama_Roof")
                        .HasColumnType("bit");

                    b.Property<bool>("Parking_Sensors")
                        .HasColumnType("bit");

                    b.Property<string>("Passenger_Seat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Power_Assisted_Steering")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Power_Tailgate")
                        .HasColumnType("bit");

                    b.Property<bool>("Power_mirrors")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Privacy_glass")
                        .HasColumnType("bit");

                    b.Property<bool>("RainSensor")
                        .HasColumnType("bit");

                    b.Property<string>("RearLamps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Rear_View_Camera")
                        .HasColumnType("bit");

                    b.Property<bool>("Rear_parking_sensors")
                        .HasColumnType("bit");

                    b.Property<string>("Rim_Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Seats_count")
                        .HasColumnType("int");

                    b.Property<bool>("Smartphone_Link_Systems")
                        .HasColumnType("bit");

                    b.Property<bool>("Speakers")
                        .HasColumnType("bit");

                    b.Property<bool>("Speed_Limiter")
                        .HasColumnType("bit");

                    b.Property<bool>("Steering_Wheel")
                        .HasColumnType("bit");

                    b.Property<bool>("Sun_Roof")
                        .HasColumnType("bit");

                    b.Property<bool>("Tire_Pressure_Monitoring")
                        .HasColumnType("bit");

                    b.Property<bool>("Touch_screen")
                        .HasColumnType("bit");

                    b.Property<bool>("Traction_Control")
                        .HasColumnType("bit");

                    b.Property<string>("Transmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("USB")
                        .HasColumnType("bit");

                    b.Property<bool>("Variable_heated_driver_and_passenger_seat")
                        .HasColumnType("bit");

                    b.Property<int>("Wheelbase")
                        .HasColumnType("int");

                    b.Property<string>("Wheels_with_tire_size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<bool>("Wireless_Charger")
                        .HasColumnType("bit");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<bool>("folding_for_back_seats")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("Maker_ID");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("CarsAdvisors.Models.News_Reviews", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("News_Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CarsAdvisors.Models.Compare", b =>
                {
                    b.HasOne("CarsAdvisors.Models.Model", "Model")
                        .WithMany("Compares")
                        .HasForeignKey("Model_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarsAdvisors.Models.Image", b =>
                {
                    b.HasOne("CarsAdvisors.Models.Model", "Model")
                        .WithMany("Images")
                        .HasForeignKey("Model_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarsAdvisors.Models.Model", b =>
                {
                    b.HasOne("CarsAdvisors.Models.Maker", "Make")
                        .WithMany("Models")
                        .HasForeignKey("Maker_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Make");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarsAdvisors.Models.Maker", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("CarsAdvisors.Models.Model", b =>
                {
                    b.Navigation("Compares");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
